==============================================
MOVIES API ENDPOINTS - DANH SÁCH ĐẦY ĐỦ
==============================================

BASE URL: http://localhost:3000

==============================================
1. BASIC CRUD OPERATIONS
==============================================

1.1. GET ALL MOVIES (Lấy danh sách phim có phân trang)
GET http://localhost:3000/movies
GET http://localhost:3000/movies?page=1&size=10&sort=id:DESC

1.1.1. GET ALL MOVIES WITHOUT PAGINATION (Lấy TẤT CẢ phim)
GET http://localhost:3000/movies/all
GET http://localhost:3000/movies/all?sort=id:DESC
GET http://localhost:3000/movies/all?sort=views:DESC
GET http://localhost:3000/movies/all?sort=created_at:ASC
GET http://localhost:3000/movies/all?sort=title:ASC

1.1.2. GET ALL MOVIES WITH LIMIT (Lấy tất cả với giới hạn tùy chọn)
GET http://localhost:3000/movies/all-with-limit
GET http://localhost:3000/movies/all-with-limit?limit=50
GET http://localhost:3000/movies/all-with-limit?limit=100&sort=views:DESC
GET http://localhost:3000/movies/all-with-limit?limit=200&sort=rating:DESC

1.2. GET MOVIE DETAIL (Chi tiết phim)
GET http://localhost:3000/movies/1
GET http://localhost:3000/movies/2
GET http://localhost:3000/movies/5
GET http://localhost:3000/movies/10

1.3. CREATE MOVIE (Tạo phim mới)
POST http://localhost:3000/movies
Content-Type: application/json
Body:
{
  "title": "Test Movie API",
  "slug": "test-movie-api-2024",
  "description": "This is a test movie created via API",
  "release_date": "2024-08-08",
  "duration": 120,
  "poster_url": "https://example.com/poster.jpg",
  "banner_url": "https://example.com/banner.jpg",
  "trailer_url": "https://youtube.com/watch?v=test",
  "status": "ongoing",
  "type": "movie",
  "country": "USA",
  "director": "Test Director",
  "cast": "Actor A, Actor B, Actor C",
  "rating": 7.5
}

1.4. UPDATE MOVIE (Cập nhật phim)
PUT http://localhost:3000/movies/1
Content-Type: application/json
Body:
{
  "title": "Updated Movie Title",
  "description": "Updated description",
  "rating": 8.5,
  "status": "completed"
}

1.5. DELETE MOVIE (Xóa phim)
DELETE http://localhost:3000/movies/35

==============================================
2. SEARCH & FILTER OPERATIONS
==============================================

2.1. SEARCH MOVIES (Tìm kiếm phim)
GET http://localhost:3000/movies/search?q=Spider
GET http://localhost:3000/movies/search?q=Spider&page=1&size=10
GET http://localhost:3000/movies/search?q=Marvel
GET http://localhost:3000/movies/search?q=Christopher Nolan
GET http://localhost:3000/movies/search?q=Action&page=1&size=5

2.2. GET NEW MOVIES (Phim mới nhất)
GET http://localhost:3000/movies/new
GET http://localhost:3000/movies/new?page=1&size=5
GET http://localhost:3000/movies/new?page=2&size=10

2.3. GET TOP MOVIES (Phim trending)
GET http://localhost:3000/movies/top
GET http://localhost:3000/movies/top?period=day
GET http://localhost:3000/movies/top?period=week
GET http://localhost:3000/movies/top?period=month

2.4. GET MOVIES BY GENRE (Phim theo thể loại)
GET http://localhost:3000/movies/by-genre/1
GET http://localhost:3000/movies/by-genre/1?page=1&size=10
GET http://localhost:3000/movies/by-genre/2?page=1&size=5
GET http://localhost:3000/movies/by-genre/3

2.5. GET MOVIES BY COUNTRY (Phim theo quốc gia)
GET http://localhost:3000/movies/by-country/USA
GET http://localhost:3000/movies/by-country/USA?page=1&size=10
GET http://localhost:3000/movies/by-country/Japan
GET http://localhost:3000/movies/by-country/Korea
GET http://localhost:3000/movies/by-country/New Zealand

2.6. GET RELATED MOVIES (Phim liên quan)
GET http://localhost:3000/movies/related/1
GET http://localhost:3000/movies/related/2
GET http://localhost:3000/movies/related/5
GET http://localhost:3000/movies/related/10

==============================================
3. ERROR HANDLING TEST CASES
==============================================

3.1. INVALID REQUESTS
GET http://localhost:3000/movies/search (thiếu query parameter 'q')
GET http://localhost:3000/movies/999 (movie không tồn tại)
GET http://localhost:3000/movies/abc (ID không hợp lệ)
GET http://localhost:3000/movies/by-genre/999 (genre không tồn tại)
GET http://localhost:3000/movies/top?period=invalid (period không hợp lệ)
PUT http://localhost:3000/movies/999 (update movie không tồn tại)
DELETE http://localhost:3000/movies/999 (delete movie không tồn tại)

3.2. INVALID DATA
POST http://localhost:3000/movies
Content-Type: application/json
Body: {} (thiếu dữ liệu bắt buộc)

POST http://localhost:3000/movies
Content-Type: application/json
Body: {
  "description": "Movie without title"
} (thiếu title và slug)

==============================================
4. PAGINATION EDGE CASES
==============================================

4.1. PAGINATION LIMITS
GET http://localhost:3000/movies?page=0&size=10 (page = 0, should correct to 1)
GET http://localhost:3000/movies?page=-1&size=10 (negative page)
GET http://localhost:3000/movies?page=1&size=0 (size = 0, should correct to 1)
GET http://localhost:3000/movies?page=1&size=200 (size > 100, should limit to 100)
GET http://localhost:3000/movies?page=999&size=10 (page vượt quá total pages)

==============================================
5. SORTING TEST CASES
==============================================

5.1. VALID SORTING
GET http://localhost:3000/movies?sort=id:ASC
GET http://localhost:3000/movies?sort=id:DESC
GET http://localhost:3000/movies?sort=views:DESC
GET http://localhost:3000/movies?sort=created_at:ASC
GET http://localhost:3000/movies?sort=title:ASC

5.2. INVALID SORTING
GET http://localhost:3000/movies?sort=invalid_field:DESC
GET http://localhost:3000/movies?sort=id:INVALID_DIRECTION
GET http://localhost:3000/movies?sort=invalid_format

==============================================
6. PERFORMANCE TEST CASES
==============================================

6.1. LARGE DATASETS
GET http://localhost:3000/movies?page=1&size=50
GET http://localhost:3000/movies?page=1&size=100

6.2. COMPLEX SEARCHES
GET http://localhost:3000/movies/search?q=a&page=1&size=50
GET http://localhost:3000/movies/search?q=Spider-Man Marvel Avengers

==============================================
EXPECTED RESPONSE CODES
==============================================

SUCCESS CASES:
- GET requests: 200 OK
- POST create: 201 Created
- PUT update: 200 OK
- DELETE: 200 OK

ERROR CASES:
- Invalid data: 400 Bad Request
- Not found: 404 Not Found
- Server errors: 500 Internal Server Error

==============================================
SAMPLE RESPONSE STRUCTURES
==============================================

GET /movies:
{
  "data": [...],
  "total": number,
  "page": number,
  "size": number,
  "totalPages": number
}

GET /movies/search:
{
  "movies": [...],
  "total": number
}

GET /movies/:id:
{
  "id": number,
  "title": string,
  "slug": string,
  "description": string,
  "genres": [...],
  "episodes": [...],
  "reviews": [...],
  "comments": [...],
  "favorites": [...]
}

POST /movies:
{
  "id": number,
  "title": string,
  "slug": string,
  "created_at": datetime,
  "updated_at": datetime,
  ...
}

DELETE /movies/:id:
{
  "message": "Movie deleted successfully"
}

==============================================
TESTING CHECKLIST
==============================================

□ 1. Basic CRUD (5 operations)
□ 2. Search functionality (5 variations)
□ 3. Filter by genre (4 tests)
□ 4. Filter by country (5 tests)
□ 5. New movies (3 tests)
□ 6. Top movies (4 tests)
□ 7. Related movies (4 tests)
□ 8. Error handling (8 cases)
□ 9. Pagination (5 edge cases)
□ 10. Sorting (8 variations)

TOTAL: 51 TEST CASES

==============================================